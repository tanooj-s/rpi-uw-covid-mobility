{"ast":null,"code":"import _classCallCheck from\"/Users/tanooj/rpi-covid-mobility/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/tanooj/rpi-covid-mobility/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/tanooj/rpi-covid-mobility/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/tanooj/rpi-covid-mobility/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import'./App.css';import{LineChart,Line,XAxis,YAxis,CartesianGrid,Tooltip,Legend}from'recharts';var Plot=/*#__PURE__*/function(_React$Component){_inherits(Plot,_React$Component);var _super=_createSuper(Plot);function Plot(props){var _this;_classCallCheck(this,Plot);_this=_super.call(this,props);var prediction_date=\"\";// use this to change line color on plot, will need to get it as a percentage of total dates\nvar collect_prediction=0;// switch to get date predictions start from // to scale y axis of plot\nfor(var i=0;i<_this.props.data.length;i++){if(_this.props.data[i].Actual==\"Prediction\"){prediction_date=_this.props.data[i].Date;collect_prediction=1;}}_this.line_percent=i*100/_this.props.data.length;// change color of line at this percentage\n_this.data_key=\"CumFatality_Stayput\";if(_this.props.settings===0){_this.data_key=\"CumFatality_Stayput\";}else if(_this.props.settings===1){_this.data_key=\"SchoolOpenNow1\";}else if(_this.props.settings===2){_this.data_key=\"SchoolOpenNow2\";}else if(_this.props.settings===3){_this.data_key=\"MaskMandate25\";}else if(_this.props.settings===4){_this.data_key=\"MaskMandate50\";}else if(_this.props.settings===5){_this.data_key=\"Shutdown1week\";}else if(_this.props.settings===6){_this.data_key=\"Shutdown2week\";}return _this;}_createClass(Plot,[{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"plot-container\"},/*#__PURE__*/React.createElement(\"p\",{className:\"plot-title\"},this.props.name),/*#__PURE__*/React.createElement(LineChart,{width:500,height:200,data:this.props.data,margin:{top:5,right:20,left:10,bottom:5},label:this.props.name},/*#__PURE__*/React.createElement(\"defs\",null,/*#__PURE__*/React.createElement(\"linearGradient\",{id:\"linecolor\",x1:\"0%\",y1:\"0\",x2:\"100%\",y2:\"0\"},/*#__PURE__*/React.createElement(\"stop\",{offset:\"0%\",stopColor:\"#0d47a1\"}),/*#__PURE__*/React.createElement(\"stop\",{offset:\"\".concat(this.line_percent,\"%\"),stopColor:\"#0d47a1\"}),/*#__PURE__*/React.createElement(\"stop\",{offset:\"\".concat(this.line_percent,\"%\"),stopColor:\"#eb3710\"}),/*#__PURE__*/React.createElement(\"stop\",{offset:\"100%\",stopColor:\"#eb3710\"}))),/*#__PURE__*/React.createElement(YAxis,{domain:[0,40000],tick:false}),/*#__PURE__*/React.createElement(XAxis,{dataKey:\"Date\"}),/*#__PURE__*/React.createElement(Tooltip,null),/*#__PURE__*/React.createElement(CartesianGrid,{stroke:\"#f7f7f7\"}),/*#__PURE__*/React.createElement(Line,{type:\"monotone\",dataKey:this.data_key// should be this.props.settings\n,stroke:\"url(#linecolor)\",yAxisId:0,dot:false,strokeWidth:3})));}}]);return Plot;}(React.Component);export default Plot;","map":{"version":3,"sources":["/Users/tanooj/rpi-covid-mobility/src/Plot.js"],"names":["React","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","Plot","props","prediction_date","collect_prediction","i","data","length","Actual","Date","line_percent","data_key","settings","name","top","right","left","bottom","Component"],"mappings":"4kBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAO,WAAP,CACA,OAAQC,SAAR,CAAmBC,IAAnB,CAAyBC,KAAzB,CAAgCC,KAAhC,CAAuCC,aAAvC,CAAsDC,OAAtD,CAA+DC,MAA/D,KAA4E,UAA5E,C,GAGMC,CAAAA,I,wGACJ,cAAYC,KAAZ,CAAmB,sCACjB,uBAAMA,KAAN,EACA,GAAIC,CAAAA,eAAe,CAAG,EAAtB,CAAyB;AACzB,GAAIC,CAAAA,kBAAkB,CAAG,CAAzB,CAA2B;AAC3B,IAAK,GAAIC,CAAAA,CAAC,CAAC,CAAX,CAAcA,CAAC,CAAC,MAAKH,KAAL,CAAWI,IAAX,CAAgBC,MAAhC,CAAwCF,CAAC,EAAzC,CAA6C,CAC3C,GAAI,MAAKH,KAAL,CAAWI,IAAX,CAAgBD,CAAhB,EAAmBG,MAAnB,EAA6B,YAAjC,CAA+C,CAC7CL,eAAe,CAAG,MAAKD,KAAL,CAAWI,IAAX,CAAgBD,CAAhB,EAAmBI,IAArC,CACAL,kBAAkB,CAAG,CAArB,CACD,CACF,CACD,MAAKM,YAAL,CAAoBL,CAAC,CAAC,GAAF,CAAO,MAAKH,KAAL,CAAWI,IAAX,CAAgBC,MAA3C,CAAmD;AACnD,MAAKI,QAAL,CAAgB,qBAAhB,CACA,GAAI,MAAKT,KAAL,CAAWU,QAAX,GAAwB,CAA5B,CAA+B,CAC7B,MAAKD,QAAL,CAAgB,qBAAhB,CACD,CAFD,IAGK,IAAI,MAAKT,KAAL,CAAWU,QAAX,GAAwB,CAA5B,CAA+B,CAClC,MAAKD,QAAL,CAAgB,gBAAhB,CACD,CAFI,IAGA,IAAI,MAAKT,KAAL,CAAWU,QAAX,GAAwB,CAA5B,CAA+B,CAClC,MAAKD,QAAL,CAAgB,gBAAhB,CACD,CAFI,IAGA,IAAI,MAAKT,KAAL,CAAWU,QAAX,GAAwB,CAA5B,CAA+B,CAClC,MAAKD,QAAL,CAAgB,eAAhB,CACD,CAFI,IAGA,IAAI,MAAKT,KAAL,CAAWU,QAAX,GAAwB,CAA5B,CAA+B,CAClC,MAAKD,QAAL,CAAgB,eAAhB,CACD,CAFI,IAGA,IAAI,MAAKT,KAAL,CAAWU,QAAX,GAAwB,CAA5B,CAA+B,CAClC,MAAKD,QAAL,CAAgB,eAAhB,CACD,CAFI,IAGA,IAAI,MAAKT,KAAL,CAAWU,QAAX,GAAwB,CAA5B,CAA+B,CAClC,MAAKD,QAAL,CAAgB,eAAhB,CACD,CAhCgB,aAiClB,C,wDAGQ,CACP,mBACE,2BAAK,SAAS,CAAC,gBAAf,eACE,yBAAG,SAAS,CAAC,YAAb,EAA2B,KAAKT,KAAL,CAAWW,IAAtC,CADF,cAEE,oBAAC,SAAD,EACE,KAAK,CAAI,GADX,CAEE,MAAM,CAAI,GAFZ,CAGE,IAAI,CAAI,KAAKX,KAAL,CAAWI,IAHrB,CAIE,MAAM,CAAI,CAAEQ,GAAG,CAAE,CAAP,CAAUC,KAAK,CAAE,EAAjB,CAAqBC,IAAI,CAAE,EAA3B,CAA+BC,MAAM,CAAE,CAAvC,CAJZ,CAKE,KAAK,CAAI,KAAKf,KAAL,CAAWW,IALtB,eAOE,6CACE,sCAAgB,EAAE,CAAC,WAAnB,CAA+B,EAAE,CAAC,IAAlC,CAAuC,EAAE,CAAC,GAA1C,CAA8C,EAAE,CAAC,MAAjD,CAAwD,EAAE,CAAC,GAA3D,eACE,4BAAM,MAAM,CAAC,IAAb,CAAkB,SAAS,CAAC,SAA5B,EADF,cAEE,4BAAM,MAAM,WAAK,KAAKH,YAAV,KAAZ,CAAuC,SAAS,CAAC,SAAjD,EAFF,cAGE,4BAAM,MAAM,WAAK,KAAKA,YAAV,KAAZ,CAAuC,SAAS,CAAC,SAAjD,EAHF,cAIE,4BAAM,MAAM,CAAC,MAAb,CAAoB,SAAS,CAAC,SAA9B,EAJF,CADF,CAPF,cAeE,oBAAC,KAAD,EAAO,MAAM,CAAE,CAAC,CAAD,CAAI,KAAJ,CAAf,CAA2B,IAAI,CAAE,KAAjC,EAfF,cAgBE,oBAAC,KAAD,EAAO,OAAO,CAAC,MAAf,EAhBF,cAiBE,oBAAC,OAAD,MAjBF,cAkBE,oBAAC,aAAD,EAAe,MAAM,CAAC,SAAtB,EAlBF,cAmBE,oBAAC,IAAD,EACE,IAAI,CAAC,UADP,CAEE,OAAO,CAAE,KAAKC,QAAU;AAF1B,CAGE,MAAM,CAAC,iBAHT,CAIE,OAAO,CAAE,CAJX,CAKE,GAAG,CAAE,KALP,CAME,WAAW,CAAE,CANf,EAnBF,CAFF,CADF,CAiCG,C,kBAvEYlB,KAAK,CAACyB,S,EA0EzB,cAAejB,CAAAA,IAAf","sourcesContent":["import React from 'react'\nimport './App.css';\nimport {LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend} from 'recharts';\n\n\nclass Plot extends React.Component {\n  constructor(props) {\n    super(props)\n    var prediction_date = \"\" // use this to change line color on plot, will need to get it as a percentage of total dates\n    let collect_prediction = 0 // switch to get date predictions start from // to scale y axis of plot\n    for (var i=0; i<this.props.data.length; i++) {\n      if (this.props.data[i].Actual == \"Prediction\") {\n        prediction_date = this.props.data[i].Date\n        collect_prediction = 1\n      }\n    }\n    this.line_percent = i*100/(this.props.data.length) // change color of line at this percentage\n    this.data_key = \"CumFatality_Stayput\"\n    if (this.props.settings === 0) {\n      this.data_key = \"CumFatality_Stayput\"\n    }\n    else if (this.props.settings === 1) {\n      this.data_key = \"SchoolOpenNow1\"\n    }\n    else if (this.props.settings === 2) {\n      this.data_key = \"SchoolOpenNow2\"\n    }\n    else if (this.props.settings === 3) {\n      this.data_key = \"MaskMandate25\"\n    }\n    else if (this.props.settings === 4) {\n      this.data_key = \"MaskMandate50\"\n    }\n    else if (this.props.settings === 5) {\n      this.data_key = \"Shutdown1week\"\n    }\n    else if (this.props.settings === 6) {\n      this.data_key = \"Shutdown2week\"\n    }\n  }\n\n\n  render() {\n    return (\n      <div className=\"plot-container\">\n        <p className=\"plot-title\">{this.props.name}</p>\n        <LineChart\n          width = {500}\n          height = {200}\n          data = {this.props.data}\n          margin = {{ top: 5, right: 20, left: 10, bottom: 5 }}\n          label = {this.props.name}\n        >\n          <defs>\n            <linearGradient id=\"linecolor\" x1=\"0%\" y1=\"0\" x2=\"100%\" y2=\"0\">\n              <stop offset=\"0%\" stopColor=\"#0d47a1\" />\n              <stop offset={`${this.line_percent}%`} stopColor=\"#0d47a1\"/>\n              <stop offset={`${this.line_percent}%`} stopColor=\"#eb3710\"/>\n              <stop offset=\"100%\" stopColor=\"#eb3710\"/>\n            </linearGradient>\n          </defs>\n          <YAxis domain={[0, 40000]} tick={false} />\n          <XAxis dataKey=\"Date\" />\n          <Tooltip />\n          <CartesianGrid stroke=\"#f7f7f7\" />\n          <Line\n            type=\"monotone\"\n            dataKey={this.data_key} // should be this.props.settings\n            stroke=\"url(#linecolor)\"\n            yAxisId={0}\n            dot={false}\n            strokeWidth={3}\n          />\n        </LineChart>\n      </div>\n    )\n      }\n}\n\nexport default Plot"]},"metadata":{},"sourceType":"module"}