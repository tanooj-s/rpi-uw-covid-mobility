{"ast":null,"code":"import _classCallCheck from\"/Users/tanooj/rpi-covid-mobility/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/tanooj/rpi-covid-mobility/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/tanooj/rpi-covid-mobility/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/tanooj/rpi-covid-mobility/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import'./App.css';import{LineChart,Line,XAxis,YAxis,CartesianGrid,Tooltip,Legend}from'recharts';var Plot=/*#__PURE__*/function(_React$Component){_inherits(Plot,_React$Component);var _super=_createSuper(Plot);function Plot(props){var _this;_classCallCheck(this,Plot);_this=_super.call(this,props);var prediction_date=\"\";// use this to change line color on plot, will need to get it as a percentage of total dates\nvar collect_prediction=0;// switch to get date predictions start from // to scale y axis of plot\nfor(var i=0;i<_this.props.data.length;i++){if(_this.props.data[i].Actual==\"Prediction\"){prediction_date=_this.props.data[i].Date;break;}}_this.line_percent=i*100/_this.props.data.length;// change color of line at this percentage\nreturn _this;}_createClass(Plot,[{key:\"render\",value:function render(){var options=[\"CumFatality_Stayput\",\"SchoolOpenNow1\",\"SchoolOpenNow2\",\"MaskMandate25\",\"MaskMandate50\",\"Shutdown1week\",\"Shutdown2week\"];var data_key=options[this.props.settings];var last_index=this.props.data.length-1;var max_value=0;for(var i=0;i<options.length;i++){if(max_value<this.props.data[last_index][options[i]]){max_value=this.props.data[last_index][options[i]];}}var y_scaler=Math.round(1.01*max_value);return/*#__PURE__*/React.createElement(\"div\",{className:\"plot-container\"},/*#__PURE__*/React.createElement(\"p\",{className:\"plot-title\"},this.props.name),/*#__PURE__*/React.createElement(LineChart,{width:400,height:200,data:this.props.data,margin:{top:5,right:20,left:10,bottom:5},label:this.props.name},/*#__PURE__*/React.createElement(\"defs\",null,/*#__PURE__*/React.createElement(\"linearGradient\",{id:\"line1color\",x1:\"0%\",y1:\"0\",x2:\"100%\",y2:\"0\"},/*#__PURE__*/React.createElement(\"stop\",{offset:\"0%\",stopColor:\"#0d47a1\"}),/*#__PURE__*/React.createElement(\"stop\",{offset:\"\".concat(this.line_percent,\"%\"),stopColor:\"#0d47a1\"}),/*#__PURE__*/React.createElement(\"stop\",{offset:\"\".concat(this.line_percent,\"%\"),stopColor:\"#4aba53\"}),/*#__PURE__*/React.createElement(\"stop\",{offset:\"100%\",stopColor:\"#4aba53\"})),/*#__PURE__*/React.createElement(\"linearGradient\",{id:\"line2color\",x1:\"0%\",y1:\"0\",x2:\"100%\",y2:\"0\"},/*#__PURE__*/React.createElement(\"stop\",{offset:\"0%\",stopColor:\"#eb3710\"}),/*#__PURE__*/React.createElement(\"stop\",{offset:\"100%\",stopColor:\"#eb3710\"}))),/*#__PURE__*/React.createElement(YAxis,{domain:[0,y_scaler],tick:{fontSize:8}}),/*#__PURE__*/React.createElement(XAxis,{dataKey:\"Date\",tick:{fontSize:8}}),/*#__PURE__*/React.createElement(Tooltip,null),/*#__PURE__*/React.createElement(CartesianGrid,{stroke:\"#f7f7f7\"}),/*#__PURE__*/React.createElement(Line,{type:\"monotone\",dataKey:\"CumFatality_Stayput\"// keep stay_put settings line\n,stroke:\"url(#line1color)\",yAxisId:0,dot:false,strokeWidth:2}),/*#__PURE__*/React.createElement(Line,{type:\"monotone\",dataKey:data_key// should be this.props.settings\n,stroke:\"url(#line2color)\",yAxisId:0,dot:false,strokeWidth:this.props.settings===0?0:2}),\"}\"));}}]);return Plot;}(React.Component);export default Plot;","map":{"version":3,"sources":["/Users/tanooj/rpi-covid-mobility/src/Plot.js"],"names":["React","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","Plot","props","prediction_date","collect_prediction","i","data","length","Actual","Date","line_percent","options","data_key","settings","last_index","max_value","y_scaler","Math","round","name","top","right","left","bottom","fontSize","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport './App.css';\nimport {LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend} from 'recharts';\n\n\nclass Plot extends React.Component {\n  constructor(props) {\n    super(props)\n    var prediction_date = \"\" // use this to change line color on plot, will need to get it as a percentage of total dates\n    let collect_prediction = 0 // switch to get date predictions start from // to scale y axis of plot\n    for (var i=0; i<this.props.data.length; i++) {\n      if (this.props.data[i].Actual == \"Prediction\") {\n        prediction_date = this.props.data[i].Date\n        break\n      }\n    }\n    this.line_percent = i*100/(this.props.data.length) // change color of line at this percentage\n  }\n\n\n  render() {\n    let options = [\"CumFatality_Stayput\",\"SchoolOpenNow1\",\"SchoolOpenNow2\",\"MaskMandate25\",\"MaskMandate50\",\"Shutdown1week\",\"Shutdown2week\"]\n    let data_key = options[this.props.settings]\n    let last_index = this.props.data.length - 1\n    let max_value = 0\n    for (var i = 0; i<options.length;i++) {\n      if (max_value < this.props.data[last_index][options[i]]) {\n        max_value = this.props.data[last_index][options[i]]\n      }\n    }\n    let y_scaler = Math.round(1.01*max_value)\n    return (\n      <div className=\"plot-container\">\n        <p className=\"plot-title\">{this.props.name}</p>\n        <LineChart\n          width = {400}\n          height = {200}\n          data = {this.props.data}\n          margin = {{ top: 5, right: 20, left: 10, bottom: 5 }}\n          label = {this.props.name}\n        >\n          <defs>\n            <linearGradient id=\"line1color\" x1=\"0%\" y1=\"0\" x2=\"100%\" y2=\"0\">\n              <stop offset=\"0%\" stopColor=\"#0d47a1\" />\n              <stop offset={`${this.line_percent}%`} stopColor=\"#0d47a1\"/>\n              <stop offset={`${this.line_percent}%`} stopColor=\"#4aba53\"/>\n              <stop offset=\"100%\" stopColor=\"#4aba53\"/>\n            </linearGradient>\n            <linearGradient id=\"line2color\" x1=\"0%\" y1=\"0\" x2=\"100%\" y2=\"0\">\n              <stop offset=\"0%\" stopColor=\"#eb3710\"/>\n              <stop offset=\"100%\" stopColor=\"#eb3710\"/>\n            </linearGradient>\n          </defs>\n          <YAxis domain={[0, y_scaler]} tick={{fontSize: 8}}/>\n          <XAxis dataKey=\"Date\" tick={{fontSize: 8}}/>\n          <Tooltip />\n          <CartesianGrid stroke=\"#f7f7f7\" />\n          <Line\n            type=\"monotone\"\n            dataKey=\"CumFatality_Stayput\" // keep stay_put settings line\n            stroke=\"url(#line1color)\"\n            yAxisId={0}\n            dot={false}\n            strokeWidth={2}\n          />\n          <Line\n              type=\"monotone\"\n              dataKey={data_key} // should be this.props.settings\n              stroke=\"url(#line2color)\"\n              yAxisId={0}\n              dot={false}\n              strokeWidth={(this.props.settings === 0) ? 0 : 2}\n          />\n\n        }\n        </LineChart>\n      </div>\n    )\n      }\n}\n\nexport default Plot"]},"metadata":{},"sourceType":"module"}