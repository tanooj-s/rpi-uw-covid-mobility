{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","search_term","response_data","handleChange","bind","handleSubmit","getResponse","e","target","name","value","this","setState","preventDefault","url","data","out_data","decoder","TextDecoder","fetch","method","mode","redirect","body","JSON","stringify","then","response","getReader","read","done","push","decode","parse","catch","error","console","log","output","response_string","className","map","item","date","retail_m","deaths","infected","retail_m_cum_avg","width","height","margin","top","right","left","bottom","dataKey","stroke","verticalAlign","type","yAxisId","onSubmit","encType","placeholder","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,mNCuH5BC,E,kDAjHb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,YAAa,GACbC,cAAe,IAEjB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBARP,E,yDAWDG,GAAI,IAAD,EACUA,EAAEC,OAAlBC,EADM,EACNA,KAAMC,EADA,EACAA,MACdC,KAAKC,SAAL,eAAiBH,EAAOC,M,mCAEbH,GACXA,EAAEM,iBAEFF,KAAKL,YAAY,yBAA0BK,KAAKX,S,2EAOhCc,EAAKC,G,uFACjBC,EAAW,GACXC,EAAU,IAAIC,Y,SACKC,MAAML,EAAK,CAChCM,OAAQ,OACRC,KAAM,OACNC,SAAU,SACVC,KAAMC,KAAKC,UAAUV,KAEtBW,MAAK,SAAAC,GAAQ,OAAIA,EAASJ,KAAKK,YAAYC,UAC3CH,MAAK,YAAqB,EAAlBI,KAAmB,IAAbpB,EAAY,EAAZA,MACbM,EAASe,KAAKd,EAAQe,OAAOtB,OAE9BgB,MAAK,kBAAM,EAAKd,SAAS,CAAEV,cAAesB,KAAKS,MAAMjB,EAAS,SAC9DkB,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,M,iJAI5B,GAAiC,KAA7BxB,KAAKX,MAAME,cACb,IAAIoC,EAAS,6DAGb,KAAIC,EAAkB5B,KAAKX,MAAME,cAC7Bc,EAAWQ,KAAKS,MAAMM,GACtBD,EACJ,yBAAKE,UAAY,UACf,4BAAK7B,KAAKX,MAAMC,YAAhB,kCACA,iPACA,yBAAKuC,UAAU,uBACb,+BACE,+BACE,4BACE,oCACA,wCACA,sCACA,wCACA,wCAGJ,+BACGxB,EAASyB,KAAI,SAAAC,GAAI,OAChB,4BACE,4BAAKA,EAAKC,MACV,4BAAKD,EAAKE,UACV,4BAAKF,EAAKG,QACV,4BAAKH,EAAKI,UACV,4BAAKJ,EAAKK,yBAKpB,yBAAKP,UAAY,kBACf,kBAAC,IAAD,CACEQ,MAAS,IACTC,OAAU,IACVlC,KAAQC,EACRkC,OAAU,CAAEC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAEjD,kBAAC,IAAD,CAAOC,QAAQ,SACf,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAeC,OAAO,YACtB,kBAAC,IAAD,CAAQC,cAAc,MAAMR,OAAQ,KACpC,kBAAC,IAAD,CAAMS,KAAK,WAAWH,QAAQ,mBAAmBC,OAAO,UAAUG,QAAS,IAC3E,kBAAC,IAAD,CAAMD,KAAK,WAAWH,QAAQ,SAASC,OAAO,UAAUG,QAAS,OAKzE,OACE,yBAAKnB,UAAU,OAEb,yBAAKA,UAAU,cACb,0BAAMoB,SAAUjD,KAAKN,aAAcwD,QAAQ,uBACzC,2BAAOH,KAAK,OAAOjD,KAAK,cAAcC,MAAOC,KAAKX,MAAMC,YAAa6D,YAAY,mBAAmBC,SAAUpD,KAAKR,eACnH,4BAAQqC,UAAU,iBAAlB,YAIJ,yBAAKA,UAAU,oBACZF,Q,GAzGO0B,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEd9C,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM8C,c","file":"static/js/main.cbf26a39.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend} from 'recharts';\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      search_term: \"\", // will be a county name\n      response_data: \"\",\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.getResponse = this.getResponse.bind(this)\n    //this.componentDidMount = this.componentDidMount.bind(this)\n  }\n  handleChange(e) {\n    const { name, value } = e.target\n    this.setState({ [name]: value })\n  }\n  handleSubmit(e) {\n    e.preventDefault()\n    //this.setState({ response_data: [] })\n    this.getResponse(\"http://127.0.0.1:5000/\", this.state)\n  }\n  //componentDidMount(e) {\n  //  this.getResponse()\n  //}\n\n\n  async getResponse(url, data) {\n    var out_data = []\n    var decoder = new TextDecoder()\n    const response = await fetch(url, {\n      method: 'POST',\n      mode: 'cors',\n      redirect: 'follow',\n      body: JSON.stringify(data)\n    })\n    .then(response => response.body.getReader().read())\n    .then(({ done, value }) => {\n      out_data.push(decoder.decode(value))\n    })\n    .then(() => this.setState({ response_data: JSON.parse(out_data[0]) }))\n    .catch(error => console.log(error))\n  }\n  render () {\n\n    if (this.state.response_data === \"\") {\n      var output = <p>Please enter a county name</p>\n    } else {\n      // hack, idk why this.state.response_data is still a string and needs to be parsed again\n      var response_string = this.state.response_data\n      var out_data = JSON.parse(response_string)\n      var output =\n      <div className = \"output\">\n        <h3>{this.state.search_term} County Covid Mobility Numbers</h3>\n        <p>Note: only retail and recreation mobility numbers are being used. M(t) is the integral (approximated by cumulative sum) of mobility. t is days. Infected population is number of deaths shifted backwards in time.</p>\n        <div className=\"datatable-container\">\n          <table>\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Mobility</th>\n                <th>Deaths</th>\n                <th>Infected</th>\n                <th>M(t)/t</th>\n              </tr>\n            </thead>\n            <tbody>\n              {out_data.map(item =>\n                <tr>\n                  <td>{item.date}</td>\n                  <td>{item.retail_m}</td>\n                  <td>{item.deaths}</td>\n                  <td>{item.infected}</td>\n                  <td>{item.retail_m_cum_avg}</td>\n                </tr>)}\n            </tbody>\n          </table>\n        </div>\n        <div className = \"plot-container\">\n          <LineChart\n            width = {800}\n            height = {800}\n            data = {out_data}\n            margin = {{ top: 5, right: 20, left: 10, bottom: 5 }}\n          >\n            <XAxis dataKey=\"date\" />\n            <Tooltip />\n            <CartesianGrid stroke=\"#f5f5f5\" />\n            <Legend verticalAlign=\"top\" height={36} />\n            <Line type=\"monotone\" dataKey=\"retail_m_cum_avg\" stroke=\"#ff7300\" yAxisId={0} />\n            <Line type=\"monotone\" dataKey=\"deaths\" stroke=\"#387908\" yAxisId={1} />\n          </LineChart>\n        </div>\n      </div>\n    }\n    return (\n      <div className=\"App\">\n\n        <div className=\"searchform\">\n          <form onSubmit={this.handleSubmit} encType=\"multipart/form-data\">\n            <input type=\"text\" name=\"search_term\" value={this.state.search_term} placeholder=\"Search by county\" onChange={this.handleChange} />\n            <button className=\"submit_button\">Search</button>\n          </form>\n        </div>\n\n        <div className=\"output-container\">\n          {output}\n        </div>\n\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}